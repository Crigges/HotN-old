package GameStart
//Do NOT import this into any package!!!
	import Pane
	import Buff
	import Char
	import Dot
	import Model
	import Filter
	import HashList
	import FloatingText
	import HeroClass
	import ItemClass
	import Helper
	import UnitClass
	import PreloadHandler
	import Image
	import Trackable
	import Setup
	import Bonus
	import TimedEffect
	import AuraHelper
	import Missle
	import Fx
	import ControlPoint
	import HandleCounter
	import LinkedList
	import ObjectIds
	import Colors
	import PlayerClass
	import Terrain
	import Texttag
	import CustomBar
	import Stack
	import Menu
	import ImageEx
	import HeroBar
	import OrderHandling
	import DebugFile
	import ObjectId
	import Spell
	import SampleSpells
	import Icon
	import IconType
	import PreloadSystem
	import ClosureTimers
	import ClassInit
	import TextSplat
	import TextBox
	import Button
	
	trigger testt = CreateTrigger()..addAction(function setCallLimit)
	Bonus lastBon = null
	vec2 tvec = vec2(0, 0)
	real hp = 0
	int testc = 0
	int testi = 0
	real ttSize = 0.0300
	real testr = 0
	string tests = null
	Spell testSpell = null
	string testChar = ""
	unit testu // = CreateUnit(Player(0), 'hpea', 0, 0, 0)
	group testg = CreateGroup()
	int progress = 0
	int recursionCounter = 0
	destructable testd //= CreateDestructable('Icon', menuStart.x + 20., menuStart.y + 10., 0, 1, 1)
	int callLimit = 1
	HashList<Unit> tList = new HashList<Unit>()
	LinkedList<Unit> lList = new LinkedList<Unit>()
	
	Window shopWindow = new Window()
	Window scoreWindow = new Window()
	Window guideWindow = new Window()
	
	
	init
		
		for int i = 0 to 11
			if GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING and GetPlayerController(Player(i)) == MAP_CONTROL_USER
				allPlayers.add(Player(i))	
				SetPlayerAbilityAvailable(Player(i), 'ZAph', false)	
				SetPlayerAbilityAvailable(Player(i), 'ZAat', false)	
				SetPlayerAbilityAvailable(Player(i), 'ZAst', false)	
				SetPlayerAbilityAvailable(Player(i), 'ZAsc', false)
		//Dot
		getTimer().startPeriodic(0.5, function Dot.loopList)
		//UnitClass
		getTimer().startPeriodic(0.03, function callKnockback)
		
		trigger blub = CreateTrigger()
		blub.addAction(function camTest)
		
		EnablePreSelect(false, false)
		

		for player p in allPlayers
			new Player(p)
		

		testt.registerPlayerChatEvent(Player(0), "", false)
		TriggerRegisterPlayerEventEndCinematic(CreateTrigger()..addAction(function onEsc), Player(0))


		
		//---------------------------------------------//
		//-------------Preload Stuff-------------------//
		//---------------------------------------------//
		Preload.startPreload()
		
		
		//---------------Attack Bons-------------------//
		
		
	function textTag()
		skip

		
	function noOpLimit()
		Preload.preloadStatus++
		if Preload.preloadStatus >= 83
			GetExpiredTimer().release()
		print("nooplimit" + Preload.preloadStatus.toString())
		
	//========================================================================================================================================================================================//
	//========================================================================================================================================================================================//
	//========================================================================================================================================================================================//
		
	class Preload
		use ClassInit
		static constant real maxProgress = 10.015
		static string array initOrder
		static real progress = 0
		static int preloadStatus = 1
		static SimpleEvent preloadEnd = new SimpleEvent()
		static boolean showProgress = true
		static int loopCounter = 0
		
		override static function classInit()
			initOrder[1] = "IconTypes"
			initOrder[2] = "Abilitys"
			initOrder[3] = "Units"
			initOrder[4] = "Items"
			initOrder[5] = "Destructables"
			initOrder[6] = "Buffs"
			initOrder[7] = "Trackables"
			initOrder[8] = "Menu"
		
		static function startPreload()
			getTimer().start(1.0, function Preload.preload)
		
		static function preload()
			print("1")
			if initOrder[preloadStatus] == null
				ClearTextMessages()
				print("Preload done in " + progress.toString() + " sec!")
				preloadEnd.callActions(0)
				GetExpiredTimer().release()
				return
			print("2")
			real check = preloadAction(initOrder[preloadStatus], loopCounter)
			print("3")
			loopCounter++
			print("4")
			if check == -2
				printError("An error while Preloading has ocurred")
				return
			else if check == -1
				print("5")
				loopCounter = 0
				preloadStatus++
				GetExpiredTimer().start(0.05, function preload)
				progress += 0.05
			else 
				GetExpiredTimer().start(check, function preload)
				progress += check
			if showProgress
				ClearTextMessages()
				print("Loading " + initOrder[preloadStatus] + ": " + (100 * (progress / maxProgress)).toString() + "%")
				
					
	init
		Preload.preloadEnd.addAction((int i) -> afterPreload())
		Button shopB = null
		Button scoreB = null
		Button guideB = null
		Button exitB = null
		Button buyB = null
		
		TextBox shopT1 = null
		TextBox shopT2 = null
		
		TextBox shopT3 = null
		TextBox shopT4 = null
		TextBox shopT5 = null
		TextBox shopT6 = null
		TextBox shopT7 = null
		TextBox shopT8 = null
		TextBox shopT9 = null
		
		Observable shopOb = null
		Observable scoreOb  = null
		Observable guideOb  = null
		Observable exitOb = null
			
		
		Pane shopPleft = null
		Pane shopPmiddle = null
		Pane shopPright = null
		Pane shopPleftBot = null
		Pane shopPleftBot2 = null
		Icon shop1 = null
		Icon shop2 = null
		Icon shop3 = null
		Icon shop4 = null
		Icon shop5 = null
		Icon shop6 = null
		Icon shop7 = null
		Icon shop8 = null
		Icon shop9 = null
		Icon shop10 = null
		Icon shop11 = null
		Icon shop12 = null
		Icon shop13 = null
		Icon shop14 = null
		Icon shop15 = null
		Icon shop16 = null
		Icon shop17 = null
		Icon shop18 = null
		Icon shop19 = null
		Icon shop20 = null
		Icon shop21 = null
		Icon shop22 = null
		Icon shop23 = null
		Icon shop24 = null
		Icon shop25 = null
		Icon shop26 = null
		Icon shop27 = null
		Icon shop28 = null
		Icon shop29 = null
		Icon shop30 = null
		Icon shop31 = null
		Icon shop32 = null
		Icon shop25a = null
		Icon shop26a = null
		Icon shop27a = null
		Icon shop28a = null
		Icon shop29a = null
		Icon shop30a = null
		Icon shop31a = null
		Icon shop32a = null
		Icon shop33 = null
		Icon shop34 = null
		Icon shop35 = null
		Icon shop36 = null
		Icon shop37 = null
		Icon shop38 = null
		Icon shop39 = null
		Icon shop40 = null
		Icon shop41 = null
		Icon shop42 = null
		Icon shop43 = null
		Icon shop44 = null
		Icon shop45 = null
		Icon shop46 = null
		Icon shop47 = null
		onPreload("Menu", (int i) -> begin
			real ret = 0.01
			switch i
				case 0
					shopB = new Button(element(2, 22), 1, Layer.L1, "Shop")
					scoreB = new Button(element(2, 20), 1, Layer.L1, "Score")
					guideB = new Button(element(2, 18), 1, Layer.L1, "Guide")
					exitB = new Button(element(2, 16), 1, Layer.L1, "Exit")
					buyB = new Button(element(34,4), 1, Layer.L1, "Buy")
				case 1
					shopPleft = new Pane(element(6, 6), element(12, 16), Layer.L2, 4, true)		
					shopPmiddle = new Pane(element(20, 6), element(8, 12), Layer.L3, 4, true)	
					shopPright = new Pane(element(30, 6), element(8, 8), Layer.L3, 4, true)
					shopPleftBot = new Pane(element(11, 1), element(12, 2), Layer.L3, 2, true)
					shopPleftBot2 = new Pane(element(6, 1), element(4, 2), Layer.L3, 2, true)
				case 2
					shopT1 = new TextBox(element(5, 3), element(4, 2), 55, Layer.L3)
					shopT1.setColor(color(255,255,0))
					shopT1.setText("Inventory", Player(0))
		
					shopT2 = new TextBox(element(19, 18), element(13, 2), 70, Layer.L3)
					shopT2.setColor(color(255,205,155))
					shopT2.setText("Ogre Glove", Player(0))
		
					shopT3 = new TextBox(element(20, 17), element(8, 1), 45, Layer.L3)
					shopT3.setColor(color(255,255,100))
					shopT3.setText("+ 1 Strength", Player(0))
					
					shopT4 = new TextBox(element(20, 16), element(8, 1), 45, Layer.L3)
					shopT4.setColor(color(255,255,100))
					shopT4.setText("+ 10% Attack Speed", Player(0))
					
					shopT5 = new TextBox(element(20, 15), element(8, 1), 45, Layer.L3)
					shopT5.setColor(color(255,255,100))
					shopT5.setText("+ 1 Armor", Player(0))
					
					shopT6 = new TextBox(element(20, 14), element(8, 1), 45, Layer.L3)
					shopT6.setColor(color(255,255,100))
					shopT6.setText("+ 20 Hit Points", Player(0))					
					
					shopT7 = new TextBox(element(20, 13), element(8, 1), 40, Layer.L3)
					shopT7.setColor(color(205,255,205))
					shopT7.setText("Ogre Boulder: Throws a big ass rock boulder towards the target position. The first unit it hits gets damage and knocked back.", Player(0))					
					
					shopT8 = new TextBox(element(20, 10), element(8, 1), 40, Layer.L3)
					shopT8.setColor(color(205,255,205))
					shopT8.setText("PointTarget/Damage=20+Spellpower/Knockback=30/Cooldown=20sec.", Player(0))	
					
//					shopT9 = new TextBox(element(20, 8), element(8, 1), 45, Layer.L3)
//					shopT9.setColor(color(155,205,255))
//					shopT9.setText("Point Target", Player(0))						
					
				case 3
					shop1 = new Icon("Glove", element(7, 7), 2)
					shop2 = new Icon("Impale", element(7, 9), 2)
					shop3 = new Icon("Glove", element(7, 11), 2)
					shop4 = new Icon("Glove", element(7, 13), 2)
					shop5 = new Icon("HealingSpray", element(7, 15), 2)	
					shop6 = new Icon("Glove", element(7, 17), 2)
					shop7 = new Icon("Impale", element(7, 19), 2)
					shop8 = new Icon("Glove", element(7, 21), 2)
					shop9 = new Icon("Glove", element(9, 21), 2)
					shop10 = new Icon("Glove", element(9, 7), 2)
					shop11 = new Icon("Glove", element(9, 9), 2)
					shop12 = new Icon("HealingSpray", element(9, 11), 2)
					shop13 = new Icon("Glove", element(9, 13), 2)	
					shop14 = new Icon("Glove", element(9, 15), 2)
					shop15 = new Icon("Glove", element(9, 17), 2)
					shop16 = new Icon("Glove", element(9, 19), 2)
					shop17 = new Icon("Glove", element(11, 21), 2)
					shop18 = new Icon("Impale", element(11, 7), 2)
					shop19 = new Icon("Glove", element(11, 9), 2)
					shop20 = new Icon("Glove", element(11, 11), 2)	
					shop21 = new Icon("Glove", element(11, 13), 2)
					shop22 = new Icon("Glove", element(11, 15), 2)
					shop23 = new Icon("Glove", element(11, 17), 2)
					shop24 = new Icon("Glove", element(11, 19), 2)
					shop25 = new Icon("Glove", element(13, 21), 2)
					shop26 = new Icon("Glove", element(13, 7), 2)
					shop27 = new Icon("Impale", element(13, 9), 2)
					shop28 = new Icon("Glove", element(13, 11), 2)	
					shop29 = new Icon("Glove", element(13, 13), 2)
					shop30 = new Icon("HealingSpray", element(13, 15), 2)
					shop31 = new Icon("Glove", element(13, 17), 2)
					shop32 = new Icon("Glove", element(13, 19), 2)
					shop25a = new Icon("Glove", element(15, 21), 2)
					shop26a = new Icon("Glove", element(15, 7), 2)
					shop27a = new Icon("Impale", element(15, 9), 2)
					shop28a = new Icon("Glove", element(15, 11), 2)	
					shop29a = new Icon("Glove", element(15, 13), 2)
					shop30a = new Icon("Glove", element(15, 15), 2)
					shop31a = new Icon("Glove", element(15, 17), 2)
					shop32a = new Icon("HealingSpray", element(15, 19), 2)
					
					shop33 = new Icon("Glove", element(12, 2), 2)
					shop34 = new Icon("Glove", element(14, 2), 2)
					shop35 = new Icon("Glove", element(16, 2), 2)
					shop36 = new Icon("Glove", element(18, 2), 2)
					shop37 = new Icon("Glove", element(20, 2), 2)
					shop38 = new Icon("Glove", element(22, 2), 2)
					
					shop39 = new Icon("Glove", element(7, 2), 2)
					shop40 = new Icon("Glove", element(9, 2), 2)
					
					shop41 = new Icon("Glove", element(34, 10), 3)
					shop42 = new Icon("Glove", element(31, 13), 1)
					shop43 = new Icon("Glove", element(34, 13), 1)
					shop44 = new Icon("Glove", element(37, 13), 1)
					shop45 = new Icon("Glove", element(31, 7), 1)
					shop46 = new Icon("Glove", element(34, 7), 1)
					shop47 = new Icon("HealingSpray", element(37, 7), 1)
				case 4
					shopOb = new Observable(shopB)
					shopOb.setClickAction((player p) -> begin
						print("Spieler " + p.getName() + " geht in den Shop")
						WindowManager.closeTopWindow(p)
						WindowManager.openWindow(shopWindow, p)
					end)
					scoreOb = new Observable(scoreB)
					scoreOb.setClickAction((player p) -> begin
						print("Spieler " + p.getName() + " geht in den Score")
						WindowManager.closeTopWindow(p)
						WindowManager.openWindow(scoreWindow, p)
					end)
					guideOb = new Observable(guideB)
					guideOb.setClickAction((player p) -> begin
						print("Spieler " + p.getName() + " geht in den Guide")
						WindowManager.closeTopWindow(p)
						WindowManager.openWindow(guideWindow, p)
					end)
					exitOb = new Observable(exitB)
					exitOb.setClickAction((player p) -> begin
						print("Spieler " + p.getName() + " geht raus")
						WindowManager.closeTopWindow(p)
					end)
				case 5
					shopWindow.add(shopOb)
					shopWindow.add(scoreOb)
					shopWindow.add(guideOb)
					shopWindow.add(exitOb)
					
					shopWindow.add(buyB)
					
					shopWindow.add(shopPright)
					shopWindow.add(shopPmiddle)
					shopWindow.add(shopPleft)
					shopWindow.add(shopPleftBot)
					shopWindow.add(shopPleftBot2)
					
					shopWindow.add(shop1)
					shopWindow.add(shop2)
					shopWindow.add(shop3)
					shopWindow.add(shop4)
					shopWindow.add(shop5)
					shopWindow.add(shop6)
					shopWindow.add(shop7)
					shopWindow.add(shop8)
					shopWindow.add(shop9)
					shopWindow.add(shop10)
					shopWindow.add(shop11)
					shopWindow.add(shop12)
					shopWindow.add(shop13)
					shopWindow.add(shop14)
					shopWindow.add(shop15)
					shopWindow.add(shop16)
					shopWindow.add(shop17)
					shopWindow.add(shop18)
					shopWindow.add(shop19)
					shopWindow.add(shop20)
					shopWindow.add(shop21)
					shopWindow.add(shop22)
					shopWindow.add(shop23)
					shopWindow.add(shop24)
					shopWindow.add(shop25)
					shopWindow.add(shop26)
					shopWindow.add(shop27)
					shopWindow.add(shop28)
					shopWindow.add(shop29)
					shopWindow.add(shop30)
					shopWindow.add(shop31)
					shopWindow.add(shop32)
					shopWindow.add(shop25a)
					shopWindow.add(shop26a)
					shopWindow.add(shop27a)
					shopWindow.add(shop28a)
					shopWindow.add(shop29a)
					shopWindow.add(shop30a)
					shopWindow.add(shop31a)
					shopWindow.add(shop32a)
					
					shopWindow.add(shop33)
					shopWindow.add(shop34)
					shopWindow.add(shop35)
					shopWindow.add(shop36)
					shopWindow.add(shop37)
					shopWindow.add(shop38)
					shopWindow.add(shop39)
					shopWindow.add(shop40)
					
					shopWindow.add(shop41)
					shopWindow.add(shop42)
					shopWindow.add(shop43)
					shopWindow.add(shop44)
					shopWindow.add(shop45)
					shopWindow.add(shop46)
					shopWindow.add(shop47)
					
					shopWindow.add(shopT1)
					shopWindow.add(shopT2)
					shopWindow.add(shopT3)
					shopWindow.add(shopT4)
					shopWindow.add(shopT5)
					shopWindow.add(shopT6)
					shopWindow.add(shopT7)
					shopWindow.add(shopT8)
//					shopWindow.add(shopT9)
					
					scoreWindow.add(shopOb)
					scoreWindow.add(scoreOb)
					scoreWindow.add(guideOb)
					scoreWindow.add(exitOb)
					
					guideWindow.add(shopOb)
					guideWindow.add(scoreOb)
					guideWindow.add(guideOb)
					guideWindow.add(exitOb)
				default
					ret = -1.
		
			return ret
		end)
					
	//========================================================================================================================================================================================//
	//========================================================================================================================================================================================//
	//========================================================================================================================================================================================//
		
	function afterPreload()
		WindowManager.openWindow(shopWindow, Player(0))
		

		

		


		
		
		
		
		
		
		

		


		
		
	function camTest()
		last.manaTT(1)
		last.dodgeTT()
		last.goldTT(1, Player(0))
		last.normalTT(1)
		
	function printRegen()
		
		real buffer = last.u.getState(UNIT_STATE_MANA)
		print((buffer - hp).toString())
		hp = buffer
		
	function leave()
		testc--
		print(testc.toString())
		
	function enter()
		testc++
		print(testc.toString())
		
	function setCallLimit()
		string chatString = GetEventPlayerChatString()
		if SubString(chatString, 0, 1) == "a"
			string cuttet = SubString(chatString, 1, 5)
			SetUnitAnimationByIndex(last.u, S2I(cuttet))
		switch chatString
			case "w1"
				WindowManager.openWindow(shopWindow, Player(0))
			case "w2"
				var w = new Window()
				WindowManager.openWindow(
					w..add(
					new Observable(
					new Icon("RingDesCrigges", element(10, 5), 2)
					..showDirect(Player(0)))), Player(0))
				w.onVoidClick((player p) -> WindowManager.closeTopWindow(p))

			case "w3"
				var w = new Window()
				WindowManager.openWindow(
					w..add(
					new Observable(
					new Icon("RingDesCrigges", element(15, 5), 2)
					..showDirect(Player(0)))), Player(0))
				w.onVoidClick((player p) -> WindowManager.closeTopWindow(p))
				//testImg.showFaded(Player(0))
				//testImg.showFaded(Player(1))
			case "hideF"
				//testImg.hideFaded(Player(0))
				//testImg.hideFaded(Player(1))
			case "dis"
				//ic.disable(Player(0))
				//testImg.disable(Player(0))
			case "en"
				//ic.enable(Player(0))
				//testImg.enable(Player(0))
			case "click"
				//ic.clickAnimation(Player(0))
				//testImg.grow(Player(0))
			case "dclick"
				//ic.doubleClickAnimation(Player(0))
				//testImg.srink(Player(0))
			case "hoover"
				//ic.trackAnimation(Player(0))
			case "unhoover"
				//ic.untrackAnimation(Player(0))
			case "size+"
				//testImg.setRealSize(testImg.realSize + (testImg.size * 1.05), Player(0))
			case "size-"
				//testImg.setRealSize(testImg.realSize + (testImg.size * 0.95), Player(0))
			case "drag t t"
				EnableDragSelect(true, true)
			case "drag t f"
				EnableDragSelect(true, false)
			case "drag f t"
				EnableDragSelect(false, true)
			case "drag f f"
				EnableDragSelect(false, false)
			case "pre t t"
				EnablePreSelect(true, true)
			case "pre t f"
				EnablePreSelect(true, false)
			case "pre f t"
				EnablePreSelect(false, true)
			case "pre f f"
				EnablePreSelect(false, false)
			case "sel t t"
				EnableSelect(true, true)
			case "sel t f"
				EnableSelect(true, false)
			case "sel f t"
				EnableSelect(false, true)
			case "sel f f"
				EnableSelect(false, false)
			case "last"
				SelectUnitForPlayerSingle(last.u, Player(0))
			case "hp+"
				last.bonusLife(10)
			case "hp++"
				last.bonusLife(100)
			case "hp+++"
				last.bonusLife(1000)
			case "hp-"
				last.bonusLife(-10)
			case "hp--"
				last.bonusLife(-100)
			case "hp---"
				last.bonusLife(-1000)
			case "rev"
				last castTo Hero.revive(vec2(100, 100))
			case "shield1"
				last.addShield(10, 10)
			case "shield2"
				last.addShield(100, 10)
			case "shield3"
				last.addShield(1000, 10)
			case "canMove f"
				last castTo Hero.acceptOrders = false
			case "canMove t"
				last castTo Hero.acceptOrders = true
			case "swap"
				SetPlayerAbilityAvailable(Player(0), 'A996', false)
				SetPlayerAbilityAvailable(Player(0), 'A999', true)
			case "bswap"
				SetPlayerAbilityAvailable(Player(0), 'A996', true)
				SetPlayerAbilityAvailable(Player(0), 'A999', false)
			case "slot"
				SetPlayerAbilityAvailable(Player(0), 'scor', false)
			case "key"
				print(GetLocalizedHotkey("ESC").toString())
			case "abi"
				print(GetUnitAbilityLevel(last.u, 'scor').toString())
				SetUnitAbilityLevel(last.u, 'scor', 2)
				print(GetUnitAbilityLevel(last.u, 'scor').toString())
			case "cast"
				IssueInstantPointOrder(last.u, "ancestralspirit", 0, 0, null)
				
		//SetUnitTimeScalePercent(last.u, S2R(GetEventPlayerChatString()))
		//testr = S2R(GetEventPlayerChatString())
		
	function onEsc()
		print("onEsc")
		createImage("ecke.blp", vec2(1010, 10), 10, 10).show()
		
	function stopAnimation()
		SetUnitTimeScalePercent(last.u, 0)
		
	function setCallLimit1()
		callLimit = S2I(GetEventPlayerChatString())
		
endpackage
