package GameStart
//Do NOT import this into any package!!!
	import Pane
	import Buff
	import Char
	import Dot
	import Filter
	import HashList
	import FloatingText
	import HeroClass
	import ItemClass
	import Helper
	import UnitClass
	import PreloadHandler
	import Image
	import Trackable
	import Setup
	import Bonus
	import TimedEffect
	import AuraHelper
	import Missle
	import Fx
	import ControlPoint
	import HandleCounter
	import LinkedList
	import ObjectIds
	import Colors
	import PlayerClass
	import Terrain
	import Texttag
	import CustomBar
	import Stack
	import Menu
	import ImageEx
	import HeroBar
	import OrderHandling
	import DebugFile
	import ObjectId
	import Spell
	import SampleSpells
	import Icon
	import IconType
	import PreloadSystem
	import ClosureTimers
	import ClassInit
	import TextSplat
	import TextBox
	import Button
	
	trigger testt = CreateTrigger()..addAction(function setCallLimit)
	Bonus lastBon = null
	real hp = 0
	int testc = 0
	int testi = 0
	real ttSize = 0.0300
	real testr = 0
	string tests = null
	Spell testSpell = null
	string testChar = ""
	unit testu // = CreateUnit(Player(0), 'hpea', 0, 0, 0)
	group testg = CreateGroup()
	int progress = 0
	int recursionCounter = 0
	destructable testd //= CreateDestructable('Icon', menuStart.x + 20., menuStart.y + 10., 0, 1, 1)
	int callLimit = 1
	HashList<Unit> tList = new HashList<Unit>()
	LinkedList<Unit> lList = new LinkedList<Unit>()
	
	
	init
		for int i = 0 to 11
			if GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING and GetPlayerController(Player(i)) == MAP_CONTROL_USER
				allPlayers.add(Player(i))	
				SetPlayerAbilityAvailable(Player(i), 'ZAph', false)	
				SetPlayerAbilityAvailable(Player(i), 'ZAat', false)	
				SetPlayerAbilityAvailable(Player(i), 'ZAst', false)	
				SetPlayerAbilityAvailable(Player(i), 'ZAsc', false)
		//Dot
		getTimer().startPeriodic(0.5, function Dot.loopList)
		//UnitClass
		getTimer().startPeriodic(0.03, function callKnockback)
		//Test Zeug
		//for int i = 1 to 10
		//	getTimer().startPeriodic(0.1, function tTTest)
		//getTimer().startPeriodic(1., function printRegen)
		trigger blub = CreateTrigger()
		blub.addAction(function camTest)
		blub.registerPlayerChatEvent(Player(0), "", false)
//		new ControlPoint(vec2(2000, 0), Player(1))
//		new ControlPoint(vec2(-2000, 0), Player(0))
		doAfter(5., () -> begin
			new Button(element(5, 5), 1, Layer.L3, "Click me!").showDirect(Player(0))
			new Button(element(5, 10), 2, Layer.L3, "Click me!").showDirect(Player(0))
		end)
		EnablePreSelect(false, false)
		//new Hero(CreateUnit(Player(0), 'H001', 0, 0, 0), 20, 100, 50, 200, 'ARHE', 100)
//		h.addDot(last, 10000, 10)
//		last.addDot(h, 10000, 10)
		//last.u.addAbility('ZA01')
//		last castTo Hero.animationIndex = 2
//		last castTo Hero.animationIntervall = 1
//		last castTo Hero.hasPeriodicAnimation = true
//		last castTo Hero.animationSpeed = 70
//		last castTo Hero.captureOffsetDistance = 90
		for player p in allPlayers
			new Player(p)
		//lastp.h = last castTo Hero
//		createImage("war3mapImported\\background.blp", vec2(0, 0), 100, 100, Layer.L1).show()
//		testImg = new Image("war3mapImported\\SorvButton.blp", element(20, 10), vec2(8, 2), OpenTo.TOP_RIGHT, Layer.L1)
		for int i = 1 to 20
			Hero h = new Hero(CreateUnit(Player(0), 'H001', 0, 0, 0), 1, 100, 50, 150, 'ARHE', 100)
			h.animationIndex = 7
			h.captureOffsetDistance = 35
			h.captureOffsetZ = 20
			h.captureEffectAttachmentPoint = "weapton"
			h.captureEffect = "Abilities\\Weapons\\FarseerMissile\\FarseerMissile.mdl"
			h.bonusAttackspeed(1000)
			testSpell = new TestSpell1Setup(h, SpellType.Q)
			//new Buff(h, "slow", 30)..attachBonus(h.bonusMovespeedPer(-50)).addEffect("Abilities\\Spells\\Human\\slow\\slowtarget.mdl", "origin")
			
			//h.addStun(20)
//			new Unit(CreateUnit(Player(0), 'hrif', -2000, 0, 0), 20, 100, 50, 200, 100)
			//IssuePointOrder(last.u, "attack", 2000, 0)
			//last.u.addAbility('tttt')
			//SetHeroLevel(last.u, 10, true)
			//last.bonusAgi(10)
			//last.bonusAttack(10)
			//last.bonusManaTimed(100, 5)
			//last.bonusManaPerTimed-(50, 10)
			//new Unit(CreateUnit(Player(1), 'hfoo', 0, 0, 0), 6, 100, 50, 70, 100)
			//new Dot(last, last, 300, 60.)
			//var b1 = new Buff(last.u, 'Bslo', 'A000', 15.)
			//b1.addEffectTimed("Abilities\\Spells\\Items\\TomeOfRetraining\\TomeOfRetrainingCaster.mdl" , "origin", 1.5)
		//new Unit(CreateUnit(Player(0), 'hsor', 0, 0, 0), 20, 100, 50, 70, 100)
		//last.u.addAbility('AU_1')
		//testi = GetHandleId(testu)
		testt.registerPlayerChatEvent(Player(0), "", false)
		TriggerRegisterPlayerEventEndCinematic(CreateTrigger()..addAction(function onEsc), Player(0))
		//for int i = 1 to 500
		//	Aura a = new Aura(last, 500, 'B000', null, 0.1)
		//a.registerEnterEvent(function enter)
		//a.registerLeaveEvent(function leave)
		//trackable tr = CreateTrackable("320x320Track.mdl", 0, 0, 0)
		//trigger t = CreateTrigger()
		//t.addAction(function track)
		//t.registerTrackableTrackEvent(tr)
		//CreateUnit(Player(0), 'hpea', 500, 0, 0)
		
		//---------------------------------------------//
		//-------------Preload Stuff-------------------//
		//---------------------------------------------//
		
		Preload.startPreload()
		
		//getTimer().startPeriodic(0.1, function textTag)
		
		//getTimer().startPeriodic(0.05, function noOpLimit)
		
		//---------------Attack Bons-------------------//
		
		
	function textTag()
		skip
//		ttSize -= 0.0001
//		SetTextTagText(testTag, "||||||||||||||||||||||||||||||||", ttSize)
//		print(ttSize.toString())
		
	function noOpLimit()
		Preload.preloadStatus++
		if Preload.preloadStatus >= 83
			GetExpiredTimer().release()
		print("nooplimit" + Preload.preloadStatus.toString())
		
	//========================================================================================================================================================================================//
	//========================================================================================================================================================================================//
	//========================================================================================================================================================================================//
		
	class Preload
		use ClassInit
		static constant real maxProgress = 10.015
		static string array initOrder
		static real progress = 0
		static int preloadStatus = 1
		static SimpleEvent preloadEnd = new SimpleEvent()
		static boolean showProgress = true
		static int loopCounter = 0
		
		override static function classInit()
			initOrder[1] = "Abilitys"
			initOrder[2] = "Units"
			initOrder[3] = "Items"
			initOrder[4] = "Destructables"
			initOrder[5] = "Buffs"
			initOrder[6] = "Trackables"
		
		static function startPreload()
			getTimer().start(1.0, function Preload.preload)
			//getTimer().start(1.0, function createBackground)
		
		static function preload()
			if initOrder[preloadStatus] == null
				ClearTextMessages()
				print("Preload done in " + progress.toString() + " sec!")
				GetExpiredTimer().release()
				return
			real check = preloadAction(initOrder[preloadStatus], loopCounter)
			loopCounter++
			if check == -2
				printError("An error while Preloading has ocurred")
				return
			else if check == -1
				loopCounter = 0
				preloadStatus++
				GetExpiredTimer().start(0.05, function preload)
				progress += 0.05
			else
				GetExpiredTimer().start(check, function preload)
				progress += check
			if showProgress
				ClearTextMessages()
				print("Loading " + initOrder[preloadStatus] + ": " + (100 * (progress / maxProgress)).toString() + "%")
				
//		static function createBackground()
//			for int i1 = 0 to 5
//				for int i2 = 0 to 3
//					createImage(Widget.backgroundTexture[GetRandomInt(1, 8)], 
//						vec2(menuStart.x + i1 * 637, menuStart.y + i2 * 637), 
//						643, 643, Layer.L3)
//						.show()
					
					
	init
		Preload.preloadEnd.addAction((int i) -> afterPreload())
					
	//========================================================================================================================================================================================//
	//========================================================================================================================================================================================//
	//========================================================================================================================================================================================//
		
	function afterPreload()
		
		
		
	function camTest()
		last.manaTT(1)
		last.dodgeTT()
		last.goldTT(1, Player(0))
		last.normalTT(1)
		
	function printRegen()
		
		real buffer = last.u.getState(UNIT_STATE_MANA)
		print((buffer - hp).toString())
		hp = buffer
		
	function leave()
		testc--
		print(testc.toString())
		
	function enter()
		testc++
		print(testc.toString())
		
	function setCallLimit()
		string chatString = GetEventPlayerChatString()
		if SubString(chatString, 0, 1) == "a"
			string cuttet = SubString(chatString, 1, 5)
			SetUnitAnimationByIndex(last.u, S2I(cuttet))
		switch chatString
			case "w1"
				var w = new Window()
				Pane pane = new Pane(element(2, 2), element(40, 20), Layer.L3, 4)
				w.add(pane)
				TextBox tb = new TextBox(element(5, 5), element(10, 5), 200, Layer.L2)
				tb.setText("Hallo Bhusta", Player(0))
				tb.setColor(color(255, 0, 0))
				w.add(tb)
				Icon ic = new Icon("RingDesCrigges", element(22, 11), 2)
				Observable ob = new Observable(ic)
				ob.setClickAction((player p) -> begin
					print("Spieler " + p.getName() + " hat auf den Ring Des crigges geklickt")
				end)
				w.onVoidClick((player p) -> begin
					WindowManager.closeTopWindow(p)
				end)
				w.add(ob)
				WindowManager.openWindow(w, Player(0))
			case "w2"
				var w = new Window()
				WindowManager.openWindow(
					w..add(
					new Observable(
					new Icon("RingDesCrigges", element(10, 5), 2)
					..showDirect(Player(0)))), Player(0))
				w.onVoidClick((player p) -> WindowManager.closeTopWindow(p))
				//ic.hideDirect(Player(0))
				//testImg.hideDirect(Player(0))
				//testImg.hideDirect(Player(1))
			case "w3"
				var w = new Window()
				WindowManager.openWindow(
					w..add(
					new Observable(
					new Icon("RingDesCrigges", element(15, 5), 2)
					..showDirect(Player(0)))), Player(0))
				w.onVoidClick((player p) -> WindowManager.closeTopWindow(p))
				//testImg.showFaded(Player(0))
				//testImg.showFaded(Player(1))
			case "hideF"
				//testImg.hideFaded(Player(0))
				//testImg.hideFaded(Player(1))
			case "dis"
				//ic.disable(Player(0))
				//testImg.disable(Player(0))
			case "en"
				//ic.enable(Player(0))
				//testImg.enable(Player(0))
			case "click"
				//ic.clickAnimation(Player(0))
				//testImg.grow(Player(0))
			case "dclick"
				//ic.doubleClickAnimation(Player(0))
				//testImg.srink(Player(0))
			case "hoover"
				//ic.trackAnimation(Player(0))
			case "unhoover"
				//ic.untrackAnimation(Player(0))
			case "size+"
				//testImg.setRealSize(testImg.realSize + (testImg.size * 1.05), Player(0))
			case "size-"
				//testImg.setRealSize(testImg.realSize + (testImg.size * 0.95), Player(0))
			case "drag t t"
				EnableDragSelect(true, true)
			case "drag t f"
				EnableDragSelect(true, false)
			case "drag f t"
				EnableDragSelect(false, true)
			case "drag f f"
				EnableDragSelect(false, false)
			case "pre t t"
				EnablePreSelect(true, true)
			case "pre t f"
				EnablePreSelect(true, false)
			case "pre f t"
				EnablePreSelect(false, true)
			case "pre f f"
				EnablePreSelect(false, false)
			case "sel t t"
				EnableSelect(true, true)
			case "sel t f"
				EnableSelect(true, false)
			case "sel f t"
				EnableSelect(false, true)
			case "sel f f"
				EnableSelect(false, false)
			case "last"
				SelectUnitForPlayerSingle(last.u, Player(0))
			case "hp+"
				last.bonusLife(10)
			case "hp++"
				last.bonusLife(100)
			case "hp+++"
				last.bonusLife(1000)
			case "hp-"
				last.bonusLife(-10)
			case "hp--"
				last.bonusLife(-100)
			case "hp---"
				last.bonusLife(-1000)
			case "rev"
				last castTo Hero.revive(vec2(100, 100))
			case "shield1"
				last.addShield(10, 10)
			case "shield2"
				last.addShield(100, 10)
			case "shield3"
				last.addShield(1000, 10)
			case "canMove f"
				last castTo Hero.acceptOrders = false
			case "canMove t"
				last castTo Hero.acceptOrders = true
			case "swap"
				SetPlayerAbilityAvailable(Player(0), 'A996', false)
				SetPlayerAbilityAvailable(Player(0), 'A999', true)
			case "bswap"
				SetPlayerAbilityAvailable(Player(0), 'A996', true)
				SetPlayerAbilityAvailable(Player(0), 'A999', false)
			case "slot"
				SetPlayerAbilityAvailable(Player(0), 'scor', false)
			case "key"
				print(GetLocalizedHotkey("ESC").toString())
			case "abi"
				print(GetUnitAbilityLevel(last.u, 'scor').toString())
				SetUnitAbilityLevel(last.u, 'scor', 2)
				print(GetUnitAbilityLevel(last.u, 'scor').toString())
			case "cast"
				IssueInstantPointOrder(last.u, "ancestralspirit", 0, 0, null)
				
		//SetUnitTimeScalePercent(last.u, S2R(GetEventPlayerChatString()))
		//testr = S2R(GetEventPlayerChatString())
		
	function onEsc()
		print("onEsc")
		createImage("ecke.blp", vec2(1010, 10), 10, 10).show()
		
	function stopAnimation()
		SetUnitTimeScalePercent(last.u, 0)
		
	function setCallLimit1()
		callLimit = S2I(GetEventPlayerChatString())
		
endpackage
