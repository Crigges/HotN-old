package Menu

	import Setup
	import PlayerClass
	import initlater Icon
	import HashList
	import Stack
	import LinkedList
	import HashMap

	public abstract class Widget
		element pos
		element size
		
		construct(element pos, element size)
			this.pos = pos
			this.size = size
		
		abstract function showDirect(player p)
		
		abstract function hideDirect(player p)
			
		abstract function showFaded(player p)
		
		abstract function hideFaded(player p)	
		
		abstract function disable(player p)
		
		abstract function enable(player p)
		
		function clickAnimation(player p)
			
		function trackAnimation(player p)
			
		function untrackAnimation(player p)
	
	public class Observable extends Widget
		Widget content
		PlayerAction click = null
		PlayerAction dClick = null
		PlayerAction track = null
		PlayerAction unTrack = null
		boolean playClickAnimation = true
		boolean playDoubleClickAnimation = true
		boolean playHoverAnimation = true
		
		
		override function showFaded(player p)
			content.showFaded(p)
			
		override function hideFaded(player p)
			content.hideFaded(p)
			
		override function showDirect(player p)
			content.showDirect(p)
			
		override function hideDirect(player p)
			content.hideFaded(p)
			
		override function disable(player p)
			content.disable(p)
			
		override function enable(player p)
			content.enable(p)
			
		function playClickAnimation(boolean value)
			playClickAnimation = value
			
		function playDoubleClickAnimation(boolean value)
			playHoverAnimation = value
			
		function playHoverAnimation(boolean value)
			playHoverAnimation = value
			
		function setClickAction(PlayerAction p)
			click = p
		
		function setDoubleClickAction(PlayerAction p)
			dClick = p
			
		function setTrackAction(PlayerAction p)
			track = p
			
		function setUnTrackAction(PlayerAction p)
			unTrack = p
		
		function onClick(player p)
			if click != null
				click.run(p)
			if playClickAnimation
				content.clickAnimation(p)

		function onDoubleClick(player p)
			if dClick != null
				dClick.run(p)
			if not playClickAnimation and playDoubleClickAnimation
				content.clickAnimation(p)
		
		function onTrack(player p)
			if track != null
				track.run(p)
			if playHoverAnimation
				content.trackAnimation(p)
			
		function onUnTrack(player p)
			if unTrack != null
				unTrack.run(p)
			if playHoverAnimation
				content.untrackAnimation(p)
		
		construct(Widget w)
			super(w.pos, w.size)
			content = w
			
	public abstract class PlayerAction
	
		abstract function run(player p)
		
			
	public class WindowManager
		static Stack<Window> array currentWindow
		static Observable array currentObservable
		
		static function openWindow(Window w, player p)
			currentWindow[GetPlayerId(p)].push(w)
			
		static function closeTopWindow(player p)
			currentWindow[GetPlayerId(p)].pop()
		
		static function trackableHit(TrackableEx tr, player p)
			currentWindow[GetPlayerId(p)].peek().getObervableAt(tr).onClick(p)
			
		static function trackableDoubleHit(TrackableEx tr, player p)
			currentWindow[GetPlayerId(p)].peek().getObervableAt(tr).onDoubleClick(p)
		
		static function trackableTrack(TrackableEx tr, player p)
			var ob = currentWindow[GetPlayerId(p)].peek().getObervableAt(tr)
			var curr = currentObservable[GetPlayerId(p)]
			if ob != curr
				ob.onTrack(p)
				curr.onUnTrack(p)
	
	public class Window
		LinkedList<Widget> content = new LinkedList<Widget>()
		HashMap<TrackableEx, Observable> trackMap = new HashMap<TrackableEx, Observable>()
		
		function add(Widget g)
			content.add(g)
			if g instanceof Observable
				for int x = g.pos.x to g.pos.x + g.size.x - 1
					for int y = g.pos.y to g.pos.y + g.size.y - 1
						trackMap.put(getTrackableAt(element(x, y)), g castTo Observable)
						
		function getObervableAt(TrackableEx tr) returns Observable
			return trackMap.get(tr)
			
	init
		for int i = 0 to 11
			WindowManager.currentWindow[i] = new Stack<Window>()

endpackage  