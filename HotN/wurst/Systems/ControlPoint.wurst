package ControlPoint
	
	import UnitClass
	import Lightning
	import Filter
	import HeroClass
	import Bonus
	import CaptureAnimation
	import Fx
	import Colors
	import TimedEffect
	import Setup
	import HashMap

	import ObjEditingNatives
	
	constant real range = 900
	constant real captureRange = 800
	public constant int model = 'cptd'
	public constant int modelMorphed = 'cpth'
	constant int morphAbi = 'ctpm'
	constant real height = 335
	constant real baseDmg = 2
	constant real dmgPerLvl = 1
	constant real percentualDmg = 0.2
	constant real heroDmgFactor = 0.1
	constant real unitDmgFactor = 0.01
	constant real creepDmg = 0.75
	constant real captureSpeedPoint = 0.0125
	constant real captureSpeed = 0.01
	constant real baseSHeal = 2.0
	constant real heroSHealFactor = 0.1
	constant real unitSHealFactor = 0.025
	
	function handle.getId() returns int
		return GetHandleId(this)
		
	public class CaptureData
		Unit owner
		lightning l1 = null
		lightning l2 = null
		real blitzPos = 0
		boolean wantCapture = false
		Action<Units> onDeath = null
		Action<ControlPoint> captureCancel = null
		Fx fx = null

		
		construct(Unit u)
			owner = u
		
		ondestroy
			l1.destr()
			l2.destr()
			if onDeath != null
				destroy onDeath
			if fx != null
				destroy fx
		
	public class ControlPoint
		static HashMap<Unit, CaptureData> captureData = new HashMap<Unit, CaptureData>()
		static constant creationAction = Unit.onCreation((Unit u) -> captureData.put(u, new CaptureData(u)))
		static constant destructionAction = Unit.onDestroy((Unit u) -> destroy captureData.get(u))
		static constant maxDistance = 900.
		vec3 pos3
		vec2 pos2
		unit clickDummy
		unit visualDummy
		group inRange = CreateGroup()
		Team owner
		
		
		construct(vec2 pos, Team owner)
			clickDummy = createUnit(Player(1), model, pos, angle(0))
			clickDummy.addAbility(morphAbi)
			clickDummy.setUserData(this castTo int)
			clickDummy.setVertexColor(colorA(0, 0, 0, 0))
			this.owner = owner
			pos2 = pos
			pos3 = pos.withZ(height)
			getTimer()..setData(this castTo int).startPeriodic(0.1, () -> GetExpiredTimer().getData() castTo thistype.inRangeCheck())
			getTimer()..setData(this castTo int).startPeriodic(0.03, () -> GetExpiredTimer().getData() castTo thistype.inRangeActions())
			for int i = 1 to 360 step 2
				new Fx(pos2.polarOffset(i.toReal().asAngleDegrees(), getRadius(i.toReal().asAngleDegrees())), 0..asAngleDegrees(), "Abilities\\Weapons\\BoatMissile\\BoatMissile.mdl")
			
		private function getRadius(angle ang) returns real
			return maxDistance * Sin(60 * DEGTORAD) / (Sin((120 - (ang.degrees() + 30) % 60) * DEGTORAD))
			
		private function isInRange(unit u) returns boolean
			return getRadius(pos2.angleTo(u.getPos())) >= u.getPos().distToVec(pos2)
			
		private function inRangeCheck()
			for unit u in ENUM_GROUP..enumUnitsInRange(pos2, maxDistance)
				if u.getUserData() != 0 and u != clickDummy and u.getAbilityLevel('dead') == 0 and not inRange.contains(u) and isInRange(u)
					enter(u.getUserData() castTo Unit)
					
		private function enter(Unit u)
			inRange.addUnit(u.u)
			let data = captureData.get(u)
			if u.team != owner
				data.l1 = createLightning(FORKED_LIGHTNING, u.getMiddle(), pos3)
				data.fx = new Fx(u.getMiddle(), 0..asAngleDegrees(), "Abilities\\Spells\\Orc\\Bloodlust\\BloodlustTarget.mdl")
				data.fx.setScale(3)
				data.fx.getDummy().setTimeScale(2)
				if data.wantCapture
					startCapture(u castTo Hero)
			data.onDeath = u.registerDeath((Units u) -> leave(u.target))
			
		private function leave(Unit u)
			inRange.removeUnit(u.u)
			let data = captureData.get(u)
			if u.team != owner
				data.l1.destr()
				data.l1 = null
				destroy data.fx
				data.fx = null
				if data.l2 != null
					data.l2.destr()
					data.l2 = null
					data.blitzPos = 0
			destroy data.onDeath
			data.onDeath = null
			
		private function inRangeActions()
			for unit temp in inRange 
				Unit u = temp.getUserData() castTo Unit
				if temp.getPos().distToVec(pos2) < getRadius(temp.getPos().angleTo(pos2))
					let data = captureData.get(u)
					if owner == u.team
						u.healSystem(1)
					else
						if data.l2 == null
							data.l1.setPos(u.getMiddle(), pos3)
							data.fx.setXY(temp.getPos())
							u.damageSystem(1)
						else
							captures(u castTo Hero, data)
				else
					leave(u)
					
		function captures(Hero h, CaptureData data)
			if data.wantCapture
				vec3 pos = h.getCaptureAttackPoint(pos2)
				if data.blitzPos < 1
					data.blitzPos += captureSpeed
					data.fx.setXYZ(getBlitzPos(pos, data.blitzPos))
				data.l1.setPos(data.fx.getPos3d(), pos3)
				data.l2.setPos(pos, data.fx.getPos3d())
			else
				vec3 pos = h.getMiddle()
				if data.blitzPos > 0
					data.blitzPos -= captureSpeed
					data.fx.setXYZ(getBlitzPos(pos, data.blitzPos))
					data.l1.setPos(data.fx.getPos3d(), pos3)
					data.l2.setPos(pos, data.fx.getPos3d())
				else
					data.l2.destr()
					data.l2 = null
					data.fx.setXYZ(pos)
					
		function getBlitzPos(vec3 pos, real progress) returns vec3
			vec3 dif = pos3 - pos
			return pos + dif * progress
			
		function wantCapture(Hero h) returns boolean
			var data = captureData.get(h)
			if not data.wantCapture and h.team != owner
				data.wantCapture = true
				if inRange.contains(h.u)
					startCapture(h)
				data.captureCancel = h.registerCaptureCancel((ControlPoint cp) -> begin
					if cp != this
						data.wantCapture = false
						if inRange.contains(h.u)
							stopCapture(h)
						destroy data.captureCancel
				end)
			return not inRange.contains(h.u)
				
		function startCapture(Hero h)
			IssueImmediateOrder(h.u, "stop")
			h.enableAutoAttack(false)
			var data = captureData.get(h)
			if data.l2 == null
				data.l2 = createLightning(FINGER_OF_DEATH, h.getMiddle(), data.fx.getPos3d())
			
		function stopCapture(Hero h)
			
			
			
			
			
					
					
	@compiletime function create_w3a_ctpm()
		let u = createObjectDefinition("w3a", 'ctpm', 'Sca6')
		u.setLvlDataString("Cha1", 1, 0, "cpth")
		u.setLvlDataString("areq", 0, 0, "")
		
	@compiletime function create_w3u_cpth()
		let u = createObjectDefinition("w3u", 'cpth', 'hpea')
		u.setInt("uhpm", 500000)
		u.setString("unam", "Controlpoint Unit (Dummy)")
		u.setInt("umvs", 0)
		u.setString("ushu", "")
		u.setString("umdl", "Abilities\\Weapons\\BoatMissile\\BoatMissile.mdl")
		u.setUnreal("umvf", 150.0)
		u.setUnreal("umvh", 150.0)
		u.setString("uabi", "Avul")
		u.setString("upgr", "")
		u.setString("ubui", "")
		u.setString("umvt", "hover")
		u.setReal("usca", 3.0)
		u.setInt("uaen", 0)
		
	@compiletime function create_w3u_cptd()
		let u = createObjectDefinition("w3u", 'cptd', 'hpea')
		u.setInt("uhpm", 500000)
		u.setString("unam", "Controlpoint Unit (Dummy)")
		u.setInt("umvs", 0)
		u.setString("ushu", "")
		u.setString("umdl", "Abilities\\Weapons\\BoatMissile\\BoatMissile.mdl")
		u.setUnreal("umvf", 150.0)
		u.setUnreal("umvh", 150.0)
		u.setString("uabi", "Avul,Aloc")
		u.setString("upgr", "")
		u.setString("ubui", "")
		u.setString("umvt", "hover")
		u.setReal("usca", 3.0)
		u.setInt("uaen", 0)